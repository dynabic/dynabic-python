#!/usr/bin/env python
"""
CustomersAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class CustomersAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def GetAllCustomers(self, siteSubdomain, pageNumber, pageSize, ):
        """GetAllCustomers
        Args:
            siteSubdomain -- site Subdomain
            pageNumber -- page number
            pageSize -- page size

        Return:
            list<CustomerResponse> -- an instance of CustomerResponse"""

        # Parse inputs
        resourcePath = '/customers/{siteSubdomain}.{format}?pageNumber={pageNumber}&pageSize={pageSize}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if pageNumber != None:
            resourcePath = resourcePath.replace('{pageNumber}', self.apiClient.toPathValue(pageNumber))
        if pageSize != None:
            resourcePath = resourcePath.replace('{pageSize}', self.apiClient.toPathValue(pageSize))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'CustomerResponse'))
        return responseObjects
    def GetCustomer(self, customerId, ):
        """GetCustomer
        Args:
            customerId -- customer Id

        Return:
            CustomerResponse -- an instance of CustomerResponse"""

        # Parse inputs
        resourcePath = '/customers/byid/{customerId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if customerId != None:
            resourcePath = resourcePath.replace('{customerId}', self.apiClient.toPathValue(customerId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CustomerResponse')
        return responseObject


    def GetCustomerByReferenceId(self, siteSubdomain, referenceId, ):
        """GetCustomerByReferenceId
        Args:
            siteSubdomain -- site Subdomain
            referenceId -- reference Id

        Return:
            CustomerResponse -- an instance of CustomerResponse"""

        # Parse inputs
        resourcePath = '/customers/{siteSubdomain}/reference-id/{referenceId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if referenceId != None:
            resourcePath = resourcePath.replace('{referenceId}', self.apiClient.toPathValue(referenceId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CustomerResponse')
        return responseObject


    def AddCustomer(self, siteSubdomain, postData, ):
        """AddCustomer
        Args:
            siteSubdomain -- site Subdomain
            postData -- new Customer

        Return:
            CustomerResponse -- an instance of CustomerResponse"""

        # Parse inputs
        resourcePath = '/customers/{siteSubdomain}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CustomerResponse')
        return responseObject


    def UpdateCustomer(self, postData, customerId, ):
        """UpdateCustomer
        Args:
            postData -- updated Customer
            customerId -- customer Id

        Return:
            CustomerResponse -- an instance of CustomerResponse"""

        # Parse inputs
        resourcePath = '/customers/{customerId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if customerId != None:
            resourcePath = resourcePath.replace('{customerId}', self.apiClient.toPathValue(customerId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CustomerResponse')
        return responseObject


    def DeleteCustomer(self, customerId, ):
        """DeleteCustomer
        Args:
            customerId -- customer Id

"""

        # Parse inputs
        resourcePath = '/customers/{customerId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if customerId != None:
            resourcePath = resourcePath.replace('{customerId}', self.apiClient.toPathValue(customerId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def GetCreditCard(self, creditCardId, ):
        """GetCreditCard
        Args:
            creditCardId -- credit Card Id

        Return:
            CreditCardResponse -- an instance of CreditCardResponse"""

        # Parse inputs
        resourcePath = '/customers/credit-card/{creditCardId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if creditCardId != None:
            resourcePath = resourcePath.replace('{creditCardId}', self.apiClient.toPathValue(creditCardId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CreditCardResponse')
        return responseObject


    def GetCreditCards(self, customerId, ):
        """GetCreditCards
        Args:
            customerId -- customer Id

        Return:
            list<CreditCardResponse> -- an instance of CreditCardResponse"""

        # Parse inputs
        resourcePath = '/customers/{customerId}/credit-cards.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if customerId != None:
            resourcePath = resourcePath.replace('{customerId}', self.apiClient.toPathValue(customerId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'CreditCardResponse'))
        return responseObjects
    def GetCreditCardsByReferenceId(self, customerReferenceId, ):
        """GetCreditCardsByReferenceId
        Args:
            customerReferenceId -- customer Reference Id

        Return:
            list<CreditCardResponse> -- an instance of CreditCardResponse"""

        # Parse inputs
        resourcePath = '/customers/reference-id/{customerReferenceId}/credit-cards.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if customerReferenceId != None:
            resourcePath = resourcePath.replace('{customerReferenceId}', self.apiClient.toPathValue(customerReferenceId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'CreditCardResponse'))
        return responseObjects
    def GetCustomersFirstCreditCard(self, customerId, ):
        """GetCustomersFirstCreditCard
        Args:
            customerId -- customer Id

        Return:
            CreditCardResponse -- an instance of CreditCardResponse"""

        # Parse inputs
        resourcePath = '/customers/{customerId}/credit-card.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if customerId != None:
            resourcePath = resourcePath.replace('{customerId}', self.apiClient.toPathValue(customerId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CreditCardResponse')
        return responseObject


    def GetFirstCreditCardForCustomerByReferenceId(self, customerReferenceId, ):
        """GetFirstCreditCardForCustomerByReferenceId
        Args:
            customerReferenceId -- customer Reference Id

        Return:
            CreditCardResponse -- an instance of CreditCardResponse"""

        # Parse inputs
        resourcePath = '/customers/reference-id/{customerReferenceId}/credit-card.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if customerReferenceId != None:
            resourcePath = resourcePath.replace('{customerReferenceId}', self.apiClient.toPathValue(customerReferenceId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CreditCardResponse')
        return responseObject


    def AddCreditCard(self, customerId, postData, ):
        """AddCreditCard
        Args:
            customerId -- customer Id
            postData -- new Credit Card

        Return:
            CreditCardResponse -- an instance of CreditCardResponse"""

        # Parse inputs
        resourcePath = '/customers/{customerId}/credit-card.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if customerId != None:
            resourcePath = resourcePath.replace('{customerId}', self.apiClient.toPathValue(customerId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CreditCardResponse')
        return responseObject


    def UpdateCreditCard(self, customerId, creditCardId, postData, ):
        """UpdateCreditCard
        Args:
            customerId -- customer Id
            creditCardId -- credit Card Id
            postData -- updated Credit Card

        Return:
            CreditCardResponse -- an instance of CreditCardResponse"""

        # Parse inputs
        resourcePath = '/customers/{customerId}/credit-card/{creditCardId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if customerId != None:
            resourcePath = resourcePath.replace('{customerId}', self.apiClient.toPathValue(customerId))
        if creditCardId != None:
            resourcePath = resourcePath.replace('{creditCardId}', self.apiClient.toPathValue(creditCardId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CreditCardResponse')
        return responseObject


    def UpdateCreditCardByCustomerReferenceId(self, siteSubdomanin, customerReferenceId, creditCardId, postData, ):
        """UpdateCreditCardByCustomerReferenceId
        Args:
            siteSubdomanin -- site Subdomanin
            customerReferenceId -- customer Reference Id
            creditCardId -- credit Card Id
            postData -- updated Credit Card

        Return:
            CreditCardResponse -- an instance of CreditCardResponse"""

        # Parse inputs
        resourcePath = '/customers/{siteSubdomanin}/reference-id/{customerReferenceId}/credit-card/{creditCardId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if siteSubdomanin != None:
            resourcePath = resourcePath.replace('{siteSubdomanin}', self.apiClient.toPathValue(siteSubdomanin))
        if customerReferenceId != None:
            resourcePath = resourcePath.replace('{customerReferenceId}', self.apiClient.toPathValue(customerReferenceId))
        if creditCardId != None:
            resourcePath = resourcePath.replace('{creditCardId}', self.apiClient.toPathValue(creditCardId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CreditCardResponse')
        return responseObject


    def DeleteCreditCard(self, customerId, creditCardId, ):
        """DeleteCreditCard
        Args:
            customerId -- customer Id
            creditCardId -- credit Card Id

"""

        # Parse inputs
        resourcePath = '/customers/{customerId}/credit-card/{creditCardId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if customerId != None:
            resourcePath = resourcePath.replace('{customerId}', self.apiClient.toPathValue(customerId))
        if creditCardId != None:
            resourcePath = resourcePath.replace('{creditCardId}', self.apiClient.toPathValue(creditCardId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def GetBillingAddresses(self, customerId, ):
        """GetBillingAddresses
        Args:
            customerId -- customer Id

        Return:
            list<AddressResponse> -- an instance of AddressResponse"""

        # Parse inputs
        resourcePath = '/customers/{customerId}/billing-addresses.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if customerId != None:
            resourcePath = resourcePath.replace('{customerId}', self.apiClient.toPathValue(customerId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'AddressResponse'))
        return responseObjects
    def GetBillingAddress(self, customerId, ):
        """GetBillingAddresses
        Args:
            customerId -- customer Id

        Return:
            AddressResponse -- an instance of AddressResponse"""

        # Parse inputs
        resourcePath = '/customers/{customerId}/first-billing-address.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if customerId != None:
            resourcePath = resourcePath.replace('{customerId}', self.apiClient.toPathValue(customerId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddressResponse')
        return responseObject


    def GetFirstBillingAddressForCustomerByReferenceId(self, siteSubdomain, customerReferenceId, ):
        """GetFirstBillingAddressForCustomerByReferenceId
        Args:
            siteSubdomain -- site Subdomain
            customerReferenceId -- customer Reference Id

        Return:
            AddressResponse -- an instance of AddressResponse"""

        # Parse inputs
        resourcePath = '/customers/{siteSubdomain}/reference-id/{customerReferenceId}/first-billing-address.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if customerReferenceId != None:
            resourcePath = resourcePath.replace('{customerReferenceId}', self.apiClient.toPathValue(customerReferenceId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddressResponse')
        return responseObject


    def AddBillingAddress(self, customerId, postData, ):
        """AddBillingAddress
        Args:
            customerId -- customer Id
            postData -- new Billing Address

        Return:
            AddressResponse -- an instance of AddressResponse"""

        # Parse inputs
        resourcePath = '/customers/{customerId}/billing-address.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if customerId != None:
            resourcePath = resourcePath.replace('{customerId}', self.apiClient.toPathValue(customerId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddressResponse')
        return responseObject


    def UpdateBillingAddress(self, customerId, billingAddressId, postData, ):
        """UpdateBillingAddress
        Args:
            customerId -- customer Id
            billingAddressId -- billing Address Id
            postData -- updated Billing Address

        Return:
            AddressResponse -- an instance of AddressResponse"""

        # Parse inputs
        resourcePath = '/customers/{customerId}/billing-address/{billingAddressId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if customerId != None:
            resourcePath = resourcePath.replace('{customerId}', self.apiClient.toPathValue(customerId))
        if billingAddressId != None:
            resourcePath = resourcePath.replace('{billingAddressId}', self.apiClient.toPathValue(billingAddressId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddressResponse')
        return responseObject


    def UpdateBillingAddressByCustomerReferenceId(self, siteSubdomain, customerReferenceId, billingAddressId, postData, ):
        """UpdateBillingAddressByCustomerReferenceId
        Args:
            siteSubdomain -- site Subdomain
            customerReferenceId -- customer Reference Id
            billingAddressId -- billing Address Id
            postData -- updated Billing Address

        Return:
            AddressResponse -- an instance of AddressResponse"""

        # Parse inputs
        resourcePath = '/customers/{siteSubdomain}/reference-id/{customerReferenceId}/billing-address/{billingAddressId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if customerReferenceId != None:
            resourcePath = resourcePath.replace('{customerReferenceId}', self.apiClient.toPathValue(customerReferenceId))
        if billingAddressId != None:
            resourcePath = resourcePath.replace('{billingAddressId}', self.apiClient.toPathValue(billingAddressId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddressResponse')
        return responseObject


    def DeleteBillingAddress(self, customerId, billingAddressId, ):
        """DeleteBillingAddress
        Args:
            customerId -- customer Id
            billingAddressId -- billing Address Id

"""

        # Parse inputs
        resourcePath = '/customers/{customerId}/billing-address/{billingAddressId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if customerId != None:
            resourcePath = resourcePath.replace('{customerId}', self.apiClient.toPathValue(customerId))
        if billingAddressId != None:
            resourcePath = resourcePath.replace('{billingAddressId}', self.apiClient.toPathValue(billingAddressId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
