#!/usr/bin/env python
"""
SubscriptionsAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class SubscriptionsAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def GetSubscriptions(self, siteSubdomain, pageNumber, pageSize, ):
        """GetSubscriptions
        Args:
            siteSubdomain -- site Subdomain
            pageNumber -- page number
            pageSize -- page size

        Return:
            list<SubscriptionResponse> -- an instance of SubscriptionResponse"""

        # Parse inputs
        resourcePath = '/subscriptions/bysite/{siteSubdomain}.{format}?pageNumber={pageNumber}&pageSize={pageSize}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if pageNumber != None:
            resourcePath = resourcePath.replace('{pageNumber}', self.apiClient.toPathValue(pageNumber))
        if pageSize != None:
            resourcePath = resourcePath.replace('{pageSize}', self.apiClient.toPathValue(pageSize))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'SubscriptionResponse'))
        return responseObjects
    def GetSubscriptionsForStatus(self, siteSubdomain, status, pageNumber, pageSize, ):
        """GetSubscriptionsForStatus
        Args:
            siteSubdomain -- site Subdomain
            status -- status
            pageNumber -- page number
            pageSize -- page size

        Return:
            list<SubscriptionResponse> -- an instance of SubscriptionResponse"""

        # Parse inputs
        resourcePath = '/subscriptions/{siteSubdomain}/status={status}.{format}?pageNumber={pageNumber}&pageSize={pageSize}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if status != None:
            resourcePath = resourcePath.replace('{status}', self.apiClient.toPathValue(status))
        if pageNumber != None:
            resourcePath = resourcePath.replace('{pageNumber}', self.apiClient.toPathValue(pageNumber))
        if pageSize != None:
            resourcePath = resourcePath.replace('{pageSize}', self.apiClient.toPathValue(pageSize))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'SubscriptionResponse'))
        return responseObjects
    def GetSubscription(self, subscriptionId, ):
        """GetSubscription
        Args:
            subscriptionId -- subscription Id

        Return:
            SubscriptionResponse -- an instance of SubscriptionResponse"""

        # Parse inputs
        resourcePath = '/subscriptions/{subscriptionId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SubscriptionResponse')
        return responseObject


    def GetSubscriptionsOfCustomer(self, customerId, ):
        """GetSubscriptionsOfCustomer
        Args:
            customerId -- customer Id

        Return:
            list<SubscriptionResponse> -- an instance of SubscriptionResponse"""

        # Parse inputs
        resourcePath = '/subscriptions/{customerId}/subscriptions.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if customerId != None:
            resourcePath = resourcePath.replace('{customerId}', self.apiClient.toPathValue(customerId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'SubscriptionResponse'))
        return responseObjects
    def GetSubscriptionsOfCustomerByReferenceId(self, siteSubdomain, customerReferenceId, ):
        """GetSubscriptionsOfCustomerByReferenceId
        Args:
            siteSubdomain -- site Subdomain
            customerReferenceId -- customer Reference Id

        Return:
            list<SubscriptionResponse> -- an instance of SubscriptionResponse"""

        # Parse inputs
        resourcePath = '/subscriptions/{siteSubdomain}/{customerReferenceId}/subscriptions.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if customerReferenceId != None:
            resourcePath = resourcePath.replace('{customerReferenceId}', self.apiClient.toPathValue(customerReferenceId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'SubscriptionResponse'))
        return responseObjects
    def AddSubscription(self, siteSubdomain, postData, ):
        """AddSubscription
        Args:
            siteSubdomain -- site Subdomain
            postData -- new Subscription

        Return:
            SubscriptionResponse -- an instance of SubscriptionResponse"""

        # Parse inputs
        resourcePath = '/subscriptions/{siteSubdomain}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SubscriptionResponse')
        return responseObject


    def UpdateSubscription(self, siteSubdomain, subscriptionId, postData, ):
        """UpdateSubscription
        Args:
            siteSubdomain -- site Subdomain
            subscriptionId -- subscription Id
            postData -- updated Subscription

        Return:
            SubscriptionResponse -- an instance of SubscriptionResponse"""

        # Parse inputs
        resourcePath = '/subscriptions/{siteSubdomain}/{subscriptionId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SubscriptionResponse')
        return responseObject


    def DeleteSubscription(self, subscriptionId, ):
        """DeleteSubscription
        Args:
            subscriptionId -- subscription Id

"""

        # Parse inputs
        resourcePath = '/subscriptions/{subscriptionId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def GetAddress(self, subscriptionId, ):
        """GetAddress
        Args:
            subscriptionId -- subscription Id

        Return:
            AddressResponse -- an instance of AddressResponse"""

        # Parse inputs
        resourcePath = '/subscriptions/{subscriptionId}/billing-address.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddressResponse')
        return responseObject


    def GetCustomersForProduct(self, subscriptionId, ):
        """GetCustomersForProduct
        Args:
            subscriptionId -- subscription Id

        Return:
            list<CustomerResponse> -- an instance of CustomerResponse"""

        # Parse inputs
        resourcePath = '/subscriptions/{subscriptionId}/customers.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'CustomerResponse'))
        return responseObjects
    def AddChargeToSubscription(self, subscriptionId, postData, ):
        """AddChargeToSubscription
        Args:
            subscriptionId -- subscription Id
            postData -- charge

        Return:
            TransactionResponse -- an instance of TransactionResponse"""

        # Parse inputs
        resourcePath = '/subscriptions/charge/{subscriptionId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'TransactionResponse')
        return responseObject


    def Refund(self, subscriptionId, postData, transactionId, ):
        """Refund
        Args:
            subscriptionId -- subscription Id
            postData -- charge
            transactionId -- transaction Id

        Return:
            TransactionResponse -- an instance of TransactionResponse"""

        # Parse inputs
        resourcePath = '/subscriptions/refund/{subscriptionId}/{transactionId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))
        if transactionId != None:
            resourcePath = resourcePath.replace('{transactionId}', self.apiClient.toPathValue(transactionId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'TransactionResponse')
        return responseObject


    def AdjustSubscriptionBalance(self, subscriptionId, isAmountAbsolute, postData, ):
        """AdjustSubscriptionBalance
        Args:
            subscriptionId -- subscription Id
            isAmountAbsolute -- is Amount Absolute
            postData -- charge

"""

        # Parse inputs
        resourcePath = '/subscriptions/adjustbalance/{subscriptionId}/{isAmountAbsolute}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))
        if isAmountAbsolute != None:
            resourcePath = resourcePath.replace('{isAmountAbsolute}', self.apiClient.toPathValue(isAmountAbsolute))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
    def ChangeSubscriptionProduct(self, subscriptionId, newProductPricingPlanId, ):
        """ChangeSubscriptionProduct
        Args:
            subscriptionId -- subscription Id
            newProductPricingPlanId -- new Product Pricing Plan Id

"""

        # Parse inputs
        resourcePath = '/subscriptions/changeproduct/{subscriptionId}/{newProductPricingPlanId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))
        if newProductPricingPlanId != None:
            resourcePath = resourcePath.replace('{newProductPricingPlanId}', self.apiClient.toPathValue(newProductPricingPlanId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def UpgradeDowngradeSubscriptionProduct(self, subscriptionId, newProductPricingPlanId, includeTrial, includeUpfrontCharge, ):
        """UpgradeDowngradeSubscriptionProduct
        Args:
            subscriptionId -- subscription Id
            newProductPricingPlanId -- new Product Pricing Plan Id
            includeTrial -- include Trial
            includeUpfrontCharge -- include Upfront Charge

"""

        # Parse inputs
        resourcePath = '/subscriptions/upgradedowngrade/{subscriptionId}/{newProductPricingPlanId}/{includeTrial}/{includeUpfrontCharge}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))
        if newProductPricingPlanId != None:
            resourcePath = resourcePath.replace('{newProductPricingPlanId}', self.apiClient.toPathValue(newProductPricingPlanId))
        if includeTrial != None:
            resourcePath = resourcePath.replace('{includeTrial}', self.apiClient.toPathValue(includeTrial))
        if includeUpfrontCharge != None:
            resourcePath = resourcePath.replace('{includeUpfrontCharge}', self.apiClient.toPathValue(includeUpfrontCharge))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def CancelSubscription(self, subscriptionId, postData, ):
        """CancelSubscription
        Args:
            subscriptionId -- subscription Id
            postData -- request

"""

        # Parse inputs
        resourcePath = '/subscriptions/cancel/{subscriptionId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
    def ReactivateSubscription(self, subscriptionId, ):
        """ReactivateSubscription
        Args:
            subscriptionId -- subscription Id

"""

        # Parse inputs
        resourcePath = '/subscriptions/reactivate/{subscriptionId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def AddSubscriptionItems(self, postData, ):
        """AddSubscriptionItems
        Args:
            postData -- request

"""

        # Parse inputs
        resourcePath = '/subscriptions/additems'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}



        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
    def UpdateSubscriptionItems(self, postData, ):
        """UpdateSubscriptionItems
        Args:
            postData -- request

"""

        # Parse inputs
        resourcePath = '/subscriptions/updateitems'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}



        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
    def GetSubscriptionItems(self, subscriptionId, ):
        """GetSubscriptionItems
        Args:
            subscriptionId -- subscription Id

        Return:
            list<SubscriptionItemResponse> -- an instance of SubscriptionItemResponse"""

        # Parse inputs
        resourcePath = '/subscriptions/items/{subscriptionId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'SubscriptionItemResponse'))
        return responseObjects
    def ResetSubscriptionMeteredItems(self, subscriptionId, ):
        """ResetSubscriptionMeteredItems
        Args:
            subscriptionId -- subscription Id

"""

        # Parse inputs
        resourcePath = '/subscriptions/resetmetered/{subscriptionId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
