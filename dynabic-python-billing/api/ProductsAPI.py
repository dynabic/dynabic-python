#!/usr/bin/env python
"""
ProductsAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class ProductsAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def GetProductsBySite(self, siteSubdomain, isArchived, pageNumber, pageSize, ):
        """GetProductsBySite
        Args:
            siteSubdomain -- site Subdomain
            isArchived -- is Archived
            pageNumber -- page number
            pageSize -- page size

        Return:
            list<ProductResponse> -- an instance of ProductResponse"""

        # Parse inputs
        resourcePath = '/products/bysite/{siteSubdomain}/{format}?isArchived={isArchived}&pageNumber={pageNumber}&pageSize={pageSize}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if isArchived != None:
            resourcePath = resourcePath.replace('{isArchived}', self.apiClient.toPathValue(isArchived))
        if pageNumber != None:
            resourcePath = resourcePath.replace('{pageNumber}', self.apiClient.toPathValue(pageNumber))
        if pageSize != None:
            resourcePath = resourcePath.replace('{pageSize}', self.apiClient.toPathValue(pageSize))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'ProductResponse'))
        return responseObjects
    def GetProductsBySiteAndFamily(self, siteSubdomain, productFamilyName, isArchived, ):
        """GetProductsBySiteAndFamily
        Args:
            siteSubdomain -- site Subdomain
            productFamilyName -- product Family Name
            isArchived -- is Archived

        Return:
            list<ProductResponse> -- an instance of ProductResponse"""

        # Parse inputs
        resourcePath = '/products/bysite/{siteSubdomain}/[{productFamilyName}]/{format}?isArchived={isArchived}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if productFamilyName != None:
            resourcePath = resourcePath.replace('{productFamilyName}', self.apiClient.toPathValue(productFamilyName))
        if isArchived != None:
            resourcePath = resourcePath.replace('{isArchived}', self.apiClient.toPathValue(isArchived))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'ProductResponse'))
        return responseObjects
    def GetProductsBySiteAndProductName(self, siteSubdomain, productName, ):
        """GetProductsBySiteAndProductName
        Args:
            siteSubdomain -- site Subdomain
            productName -- product Name

        Return:
            list<ProductResponse> -- an instance of ProductResponse"""

        # Parse inputs
        resourcePath = '/products/bysite/{siteSubdomain}/[{productName}].{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if productName != None:
            resourcePath = resourcePath.replace('{productName}', self.apiClient.toPathValue(productName))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'ProductResponse'))
        return responseObjects
    def GetProductByApiRef(self, siteId, apiRef, ):
        """GetProductByApiRef
        Args:
            siteId -- site Id
            apiRef -- api Ref

        Return:
            ProductResponse -- an instance of ProductResponse"""

        # Parse inputs
        resourcePath = '/products/byapiref/{siteId}/{apiRef}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteId != None:
            resourcePath = resourcePath.replace('{siteId}', self.apiClient.toPathValue(siteId))
        if apiRef != None:
            resourcePath = resourcePath.replace('{apiRef}', self.apiClient.toPathValue(apiRef))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'ProductResponse')
        return responseObject


    def GetProductsByFamilyId(self, productFamilyId, isArchived, ):
        """GetProductsByFamilyId
        Args:
            productFamilyId -- product Family Id
            isArchived -- is Archived

        Return:
            list<ProductResponse> -- an instance of ProductResponse"""

        # Parse inputs
        resourcePath = '/products/byfamily/{productFamilyId}/{format}?isArchived={isArchived}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if productFamilyId != None:
            resourcePath = resourcePath.replace('{productFamilyId}', self.apiClient.toPathValue(productFamilyId))
        if isArchived != None:
            resourcePath = resourcePath.replace('{isArchived}', self.apiClient.toPathValue(isArchived))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'ProductResponse'))
        return responseObjects
    def GetProductByFamilyIdAndProductName(self, productFamilyId, productName, ):
        """GetProductByFamilyIdAndProductName
        Args:
            productFamilyId -- product Family Id
            productName -- product Name

        Return:
            ProductResponse -- an instance of ProductResponse"""

        # Parse inputs
        resourcePath = '/products/byfamily/{productFamilyId}/[{productName}].{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if productFamilyId != None:
            resourcePath = resourcePath.replace('{productFamilyId}', self.apiClient.toPathValue(productFamilyId))
        if productName != None:
            resourcePath = resourcePath.replace('{productName}', self.apiClient.toPathValue(productName))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'ProductResponse')
        return responseObject


    def GetProductById(self, productId, ):
        """GetProductById
        Args:
            productId -- product Id

        Return:
            ProductResponse -- an instance of ProductResponse"""

        # Parse inputs
        resourcePath = '/products/{productId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if productId != None:
            resourcePath = resourcePath.replace('{productId}', self.apiClient.toPathValue(productId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'ProductResponse')
        return responseObject


    def AddProduct(self, postData, ):
        """AddProduct
        Args:
            postData -- new Product

        Return:
            ProductResponse -- an instance of ProductResponse"""

        # Parse inputs
        resourcePath = '/products/{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}



        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'ProductResponse')
        return responseObject


    def UpdateProduct(self, postData, productId, ):
        """UpdateProduct
        Args:
            postData -- updated Product
            productId -- product Id

        Return:
            ProductResponse -- an instance of ProductResponse"""

        # Parse inputs
        resourcePath = '/products/{productId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if productId != None:
            resourcePath = resourcePath.replace('{productId}', self.apiClient.toPathValue(productId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'ProductResponse')
        return responseObject


    def DeleteProduct(self, productId, ):
        """DeleteProduct
        Args:
            productId -- product Id

"""

        # Parse inputs
        resourcePath = '/products/{productId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if productId != None:
            resourcePath = resourcePath.replace('{productId}', self.apiClient.toPathValue(productId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def ArchiveProduct(self, productId, ):
        """ArchiveProduct
        Args:
            productId -- product Id

"""

        # Parse inputs
        resourcePath = '/products/archive/{productId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if productId != None:
            resourcePath = resourcePath.replace('{productId}', self.apiClient.toPathValue(productId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def ActivateProduct(self, productId, ):
        """ActivateProduct
        Args:
            productId -- product Id

"""

        # Parse inputs
        resourcePath = '/products/activate/{productId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if productId != None:
            resourcePath = resourcePath.replace('{productId}', self.apiClient.toPathValue(productId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
