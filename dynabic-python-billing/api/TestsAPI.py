#!/usr/bin/env python
"""
TestsAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class TestsAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def Refund(self, subscriptionId, transactionId, amount, ):
        """Refund
        Args:
            subscriptionId -- subscription Id
            transactionId -- transaction Id
            amount -- amount

        Return:
            bool -- an instance of bool"""

        # Parse inputs
        resourcePath = '/tests/refund/{subscriptionId}/{transactionId}/{amount}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))
        if transactionId != None:
            resourcePath = resourcePath.replace('{transactionId}', self.apiClient.toPathValue(transactionId))
        if amount != None:
            resourcePath = resourcePath.replace('{amount}', self.apiClient.toPathValue(amount))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'bool')
        return responseObject


    def AdjustSubscriptionBalance(self, subscriptionId, isAmountAbsolute, amount, chargeDetails, ):
        """AdjustSubscriptionBalance
        Args:
            subscriptionId -- subscription Id
            isAmountAbsolute -- is Amount Absolute
            amount -- amount
            chargeDetails -- charge Details

        Return:
            bool -- an instance of bool"""

        # Parse inputs
        resourcePath = '/tests/adjustsubscriptionbalance/{subscriptionId}/{isAmountAbsolute}/{amount}/{chargeDetails}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))
        if isAmountAbsolute != None:
            resourcePath = resourcePath.replace('{isAmountAbsolute}', self.apiClient.toPathValue(isAmountAbsolute))
        if amount != None:
            resourcePath = resourcePath.replace('{amount}', self.apiClient.toPathValue(amount))
        if chargeDetails != None:
            resourcePath = resourcePath.replace('{chargeDetails}', self.apiClient.toPathValue(chargeDetails))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'bool')
        return responseObject


    def AssessSubscriptions(self, ):
        """AssessSubscriptions
        Args:
"""

        # Parse inputs
        resourcePath = '/tests/assesssubscriptions'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}



        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def AddChargeToSubscription(self, subscriptionId, amount, chargeDetails, ):
        """AddChargeToSubscription
        Args:
            subscriptionId -- subscription Id
            amount -- amount
            chargeDetails -- charge Details

        Return:
            bool -- an instance of bool"""

        # Parse inputs
        resourcePath = '/tests/addcharge/{subscriptionId}/{amount}/{chargeDetails}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))
        if amount != None:
            resourcePath = resourcePath.replace('{amount}', self.apiClient.toPathValue(amount))
        if chargeDetails != None:
            resourcePath = resourcePath.replace('{chargeDetails}', self.apiClient.toPathValue(chargeDetails))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'bool')
        return responseObject


    def AddSubscription(self, siteSubdomain, postData, signUpDate, ):
        """AddSubscription
        Args:
            siteSubdomain -- site Subdomain
            postData -- new Subscription
            signUpDate -- sign Up Date

        Return:
            SubscriptionResponse -- an instance of SubscriptionResponse"""

        # Parse inputs
        resourcePath = '/tests/addsubscription/{siteSubdomain}/{signUpDate}/{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if signUpDate != None:
            resourcePath = resourcePath.replace('{signUpDate}', self.apiClient.toPathValue(signUpDate))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SubscriptionResponse')
        return responseObject


    def AddEventToSubscription(self, postData, ):
        """AddEventToSubscription
        Args:
            postData -- platform Event

        Return:
            bool -- an instance of bool"""

        # Parse inputs
        resourcePath = '/tests/addeventtosubscription/{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}



        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'bool')
        return responseObject


    def SendDailyActivityReport(self, siteId, ):
        """SendDailyActivityReport
        Args:
            siteId -- site Id

        Return:
            bool -- an instance of bool"""

        # Parse inputs
        resourcePath = '/tests/sendemailupdate/{siteId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if siteId != None:
            resourcePath = resourcePath.replace('{siteId}', self.apiClient.toPathValue(siteId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'bool')
        return responseObject


    def GetProductWithFullData(self, productId, siteId, ):
        """GetProductWithFullData
        Args:
            productId -- product Id
            siteId -- site Id

        Return:
            ProductResponse -- an instance of ProductResponse"""

        # Parse inputs
        resourcePath = '/tests/fullproduct/{siteId}/{productId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if productId != None:
            resourcePath = resourcePath.replace('{productId}', self.apiClient.toPathValue(productId))
        if siteId != None:
            resourcePath = resourcePath.replace('{siteId}', self.apiClient.toPathValue(siteId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'ProductResponse')
        return responseObject


    def GetSubscriptionItemsForAllSubscriptionProductItems(self, subscriptionId, ):
        """GetSubscriptionItemsForAllSubscriptionProductItems
        Args:
            subscriptionId -- subscription Id

"""

        # Parse inputs
        resourcePath = '/tests/getsubscriptionitemsforallsubscriptionproductitems/{subscriptionId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def GetSubscriptionItemsForPricingPlan(self, productPricingPlanId, siteId, ):
        """GetSubscriptionItemsForPricingPlan
        Args:
            productPricingPlanId -- product PricingPlan Id
            siteId -- site Id

"""

        # Parse inputs
        resourcePath = '/tests/getsubscriptionitemsforpricingplan/{siteId}/{productPricingPlanId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if productPricingPlanId != None:
            resourcePath = resourcePath.replace('{productPricingPlanId}', self.apiClient.toPathValue(productPricingPlanId))
        if siteId != None:
            resourcePath = resourcePath.replace('{siteId}', self.apiClient.toPathValue(siteId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
