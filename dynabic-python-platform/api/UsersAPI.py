#!/usr/bin/env python
"""
UsersAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class UsersAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def GetAllUsers(self, pageNumber, pageSize, ):
        """GetAllUsers
        Args:
            pageNumber -- page Number
            pageSize -- page Size

        Return:
            list<UserResponse> -- an instance of UserResponse"""

        # Parse inputs
        resourcePath = '/users/{format}?pageNumber={pageNumber}&pageSize={pageSize}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if pageNumber != None:
            resourcePath = resourcePath.replace('{pageNumber}', self.apiClient.toPathValue(pageNumber))
        if pageSize != None:
            resourcePath = resourcePath.replace('{pageSize}', self.apiClient.toPathValue(pageSize))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'UserResponse'))
        return responseObjects
    def GetUserById(self, userId, ):
        """GetUserById
        Args:
            userId -- user Id

        Return:
            UserResponse -- an instance of UserResponse"""

        # Parse inputs
        resourcePath = '/users/{userId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', self.apiClient.toPathValue(userId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UserResponse')
        return responseObject


    def GetUserByUserName(self, userName, ):
        """GetUserByUserName
        Args:
            userName -- user Name

        Return:
            UserResponse -- an instance of UserResponse"""

        # Parse inputs
        resourcePath = '/users/byname/[{userName}].{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userName != None:
            resourcePath = resourcePath.replace('{userName}', self.apiClient.toPathValue(userName))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UserResponse')
        return responseObject


    def GetUserApiKeys(self, userId, ):
        """GetUserApiKeys
        Args:
            userId -- user Id

        Return:
            UserApiKeysResponse -- an instance of UserApiKeysResponse"""

        # Parse inputs
        resourcePath = '/users/apikeys/{userId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', self.apiClient.toPathValue(userId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UserApiKeysResponse')
        return responseObject


    def AddUser(self, postData, ):
        """AddUser
        Args:
            postData -- new User

        Return:
            UserResponse -- an instance of UserResponse"""

        # Parse inputs
        resourcePath = '/users/{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}



        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UserResponse')
        return responseObject


    def UpdateUser(self, postData, userId, ):
        """UpdateUser
        Args:
            postData -- updatedUser
            userId -- user Id

        Return:
            UserResponse -- an instance of UserResponse"""

        # Parse inputs
        resourcePath = '/users/{userId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', self.apiClient.toPathValue(userId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UserResponse')
        return responseObject


    def DeleteUser(self, userId, ):
        """DeleteUser
        Args:
            userId -- user Id

"""

        # Parse inputs
        resourcePath = '/users/{userId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', self.apiClient.toPathValue(userId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def SetDeletedStatus(self, userId, status, ):
        """SetDeletedStatus
        Args:
            userId -- user Id
            status -- status

"""

        # Parse inputs
        resourcePath = '/users/{userId}/delete-status/{status}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', self.apiClient.toPathValue(userId))
        if status != None:
            resourcePath = resourcePath.replace('{status}', self.apiClient.toPathValue(status))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def SetActiveStatus(self, userId, status, ):
        """SetActiveStatus
        Args:
            userId -- user Id
            status -- status

"""

        # Parse inputs
        resourcePath = '/users/{userId}/active-status/{status}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', self.apiClient.toPathValue(userId))
        if status != None:
            resourcePath = resourcePath.replace('{status}', self.apiClient.toPathValue(status))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def ResetPassword(self, userId, ):
        """ResetPassword
        Args:
            userId -- user Id

"""

        # Parse inputs
        resourcePath = '/users/{userId}/password'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', self.apiClient.toPathValue(userId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def ModifyPassword(self, userId, oldPassword, newPassword, ):
        """ModifyPassword
        Args:
            userId -- user Id
            oldPassword -- old Password
            newPassword -- new Password

"""

        # Parse inputs
        resourcePath = '/users/{userId}/new-pwd/{oldPassword}/{newPassword}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', self.apiClient.toPathValue(userId))
        if oldPassword != None:
            resourcePath = resourcePath.replace('{oldPassword}', self.apiClient.toPathValue(oldPassword))
        if newPassword != None:
            resourcePath = resourcePath.replace('{newPassword}', self.apiClient.toPathValue(newPassword))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def SetRoles(self, userId, roles, ):
        """SetRoles
        Args:
            userId -- user Id
            roles -- roles

"""

        # Parse inputs
        resourcePath = '/users/{userId}/set-roles?roles={roles}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', self.apiClient.toPathValue(userId))
        if roles != None:
            resourcePath = resourcePath.replace('{roles}', self.apiClient.toPathValue(roles))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def DeleteApiKeys(self, userId, ):
        """DeleteApiKeys
        Args:
            userId -- user Id

"""

        # Parse inputs
        resourcePath = '/users/{userId}/disable-api-access'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', self.apiClient.toPathValue(userId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
    def GenerateNewApiKeys(self, userId, ):
        """GenerateNewApiKeys
        Args:
            userId -- user Id

        Return:
            UserApiKeysResponse -- an instance of UserApiKeysResponse"""

        # Parse inputs
        resourcePath = '/users/enable-api-access/{userId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', self.apiClient.toPathValue(userId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UserApiKeysResponse')
        return responseObject


