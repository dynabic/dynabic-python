#!/usr/bin/env python
"""
SettingsAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class SettingsAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def GetSettings(self, siteSubdomain, ):
        """GetSettings
        Args:
            siteSubdomain -- site Subdomain

        Return:
            list<SettingResponse> -- an instance of SettingResponse"""

        # Parse inputs
        resourcePath = '/settings/{siteSubdomain}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'SettingResponse'))
        return responseObjects
    def GetSettingById(self, siteSubdomain, settingId, ):
        """GetSettingById
        Args:
            siteSubdomain -- site Subdomain
            settingId -- setting Id

        Return:
            SettingResponse -- an instance of SettingResponse"""

        # Parse inputs
        resourcePath = '/settings/{siteSubdomain}/{settingId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if settingId != None:
            resourcePath = resourcePath.replace('{settingId}', self.apiClient.toPathValue(settingId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SettingResponse')
        return responseObject


    def GetSettingByName(self, siteSubdomain, settingName, ):
        """GetSettingByName
        Args:
            siteSubdomain -- site Subdomain
            settingName -- setting Name

        Return:
            SettingResponse -- an instance of SettingResponse"""

        # Parse inputs
        resourcePath = '/settings/{siteSubdomain}/name={settingName}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if settingName != None:
            resourcePath = resourcePath.replace('{settingName}', self.apiClient.toPathValue(settingName))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SettingResponse')
        return responseObject


    def UpdateSetting(self, siteSubdomain, settingId, postData, ):
        """UpdateSetting
        Args:
            siteSubdomain -- site Subdomain
            settingId -- setting Id
            postData -- setting Request

        Return:
            SettingResponse -- an instance of SettingResponse"""

        # Parse inputs
        resourcePath = '/settings/{siteSubdomain}/{settingId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if settingId != None:
            resourcePath = resourcePath.replace('{settingId}', self.apiClient.toPathValue(settingId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SettingResponse')
        return responseObject


    def UpdateSettingWithExplicitParameters(self, settingsSettingsInput=None, ):
        """UpdateSettingWithExplicitParameters
        Args:
            settingsSettingsInput -- 

        Return:
            SettingResponse -- an instance of SettingResponse"""

        # Parse inputs
        resourcePath = '/settings/{siteSubdomain}/id={settingId}/name={settingName}/value={settingValue}/description={settingDescription}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        if settingsSettingsInput != None and settingsSettingsInput.siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(settingsSettingsInput.siteSubdomain))
        if settingsSettingsInput != None and settingsSettingsInput.settingId != None:
            resourcePath = resourcePath.replace('{settingId}', self.apiClient.toPathValue(settingsSettingsInput.settingId))
        if settingsSettingsInput != None and settingsSettingsInput.settingName != None:
            resourcePath = resourcePath.replace('{settingName}', self.apiClient.toPathValue(settingsSettingsInput.settingName))
        if settingsSettingsInput != None and settingsSettingsInput.settingValue != None:
            resourcePath = resourcePath.replace('{settingValue}', self.apiClient.toPathValue(settingsSettingsInput.settingValue))
        if settingsSettingsInput != None and settingsSettingsInput.settingDescription != None:
            resourcePath = resourcePath.replace('{settingDescription}', self.apiClient.toPathValue(settingsSettingsInput.settingDescription))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SettingResponse')
        return responseObject


    def UpdateSettingWithExplicitParameters2(self, siteSubdomain, settingId, settingValue, ):
        """UpdateSettingWithExplicitParameters2
        Args:
            siteSubdomain -- site Subdomain
            settingId -- setting Id
            settingValue -- setting Value

        Return:
            SettingResponse -- an instance of SettingResponse"""

        # Parse inputs
        resourcePath = '/settings/{siteSubdomain}/id={settingId}/value={settingValue}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))
        if settingId != None:
            resourcePath = resourcePath.replace('{settingId}', self.apiClient.toPathValue(settingId))
        if settingValue != None:
            resourcePath = resourcePath.replace('{settingValue}', self.apiClient.toPathValue(settingValue))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SettingResponse')
        return responseObject


    def GetDefaultSetting(self, settingName, ):
        """GetDefaultSetting
        Args:
            settingName -- setting Name

        Return:
            SettingResponse -- an instance of SettingResponse"""

        # Parse inputs
        resourcePath = '/settings/default/{settingName}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if settingName != None:
            resourcePath = resourcePath.replace('{settingName}', self.apiClient.toPathValue(settingName))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SettingResponse')
        return responseObject


