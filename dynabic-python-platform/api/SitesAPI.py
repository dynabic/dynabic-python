#!/usr/bin/env python
"""
SitesAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class SitesAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def GetSites(self, pageNumber, pageSize, ):
        """GetSites
        Args:
            pageNumber -- page Number
            pageSize -- page Size

        Return:
            list<SiteResponse> -- an instance of SiteResponse"""

        # Parse inputs
        resourcePath = '/sites/{format}?pageNumber={pageNumber}&pageSize={pageSize}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if pageNumber != None:
            resourcePath = resourcePath.replace('{pageNumber}', self.apiClient.toPathValue(pageNumber))
        if pageSize != None:
            resourcePath = resourcePath.replace('{pageSize}', self.apiClient.toPathValue(pageSize))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'SiteResponse'))
        return responseObjects
    def GetSiteById(self, siteId, ):
        """GetSiteById
        Args:
            siteId -- site Id

        Return:
            SiteResponse -- an instance of SiteResponse"""

        # Parse inputs
        resourcePath = '/sites/{siteId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteId != None:
            resourcePath = resourcePath.replace('{siteId}', self.apiClient.toPathValue(siteId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SiteResponse')
        return responseObject


    def GetSiteBySubdomain(self, siteSubdomain, ):
        """GetSiteBySubdomain
        Args:
            siteSubdomain -- site Subdomain

        Return:
            SiteResponse -- an instance of SiteResponse"""

        # Parse inputs
        resourcePath = '/sites/subdomain/{siteSubdomain}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteSubdomain != None:
            resourcePath = resourcePath.replace('{siteSubdomain}', self.apiClient.toPathValue(siteSubdomain))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SiteResponse')
        return responseObject


    def GetSitesByName(self, siteName, ):
        """GetSitesByName
        Args:
            siteName -- site Name

        Return:
            list<SiteResponse> -- an instance of SiteResponse"""

        # Parse inputs
        resourcePath = '/sites/name/{siteName}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteName != None:
            resourcePath = resourcePath.replace('{siteName}', self.apiClient.toPathValue(siteName))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'SiteResponse'))
        return responseObjects
    def AddSite(self, postData, ):
        """AddSite
        Args:
            postData -- new Site

        Return:
            SiteResponse -- an instance of SiteResponse"""

        # Parse inputs
        resourcePath = '/sites/{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}



        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SiteResponse')
        return responseObject


    def UpdateSite(self, postData, siteId, ):
        """UpdateSite
        Args:
            postData -- updated Site
            siteId -- site Id

        Return:
            SiteResponse -- an instance of SiteResponse"""

        # Parse inputs
        resourcePath = '/sites/{siteId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if siteId != None:
            resourcePath = resourcePath.replace('{siteId}', self.apiClient.toPathValue(siteId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SiteResponse')
        return responseObject


    def DeleteSite(self, siteId, ):
        """DeleteSite
        Args:
            siteId -- site Id

"""

        # Parse inputs
        resourcePath = '/sites/{siteId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if siteId != None:
            resourcePath = resourcePath.replace('{siteId}', self.apiClient.toPathValue(siteId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
