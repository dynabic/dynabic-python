#!/usr/bin/env python
"""
EventsAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class EventsAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def GetEventsForSubscription(self, subscriptionId, pageNumber, pageSize, ):
        """GetEventsForSubscription
        Args:
            subscriptionId -- subscription Id
            pageNumber -- page Number
            pageSize -- page Size

        Return:
            list<EventResponse> -- an instance of EventResponse"""

        # Parse inputs
        resourcePath = '/events/subscription/{subscriptionId}.{format}?pageNumber={pageNumber}&pageSize={pageSize}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))
        if pageNumber != None:
            resourcePath = resourcePath.replace('{pageNumber}', self.apiClient.toPathValue(pageNumber))
        if pageSize != None:
            resourcePath = resourcePath.replace('{pageSize}', self.apiClient.toPathValue(pageSize))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'EventResponse'))
        return responseObjects
    def GetEventsForSubscriptionBetweenDates(self, subscriptionId, fromDate, toDate, ):
        """GetEventsForSubscriptionBetweenDates
        Args:
            subscriptionId -- subscription Id
            fromDate -- from Date
            toDate -- to Date

        Return:
            list<EventResponse> -- an instance of EventResponse"""

        # Parse inputs
        resourcePath = '/events/subscription/{subscriptionId}/{fromDate}/{format}?toDate={toDate}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if subscriptionId != None:
            resourcePath = resourcePath.replace('{subscriptionId}', self.apiClient.toPathValue(subscriptionId))
        if fromDate != None:
            resourcePath = resourcePath.replace('{fromDate}', self.apiClient.toPathValue(fromDate))
        if toDate != None:
            resourcePath = resourcePath.replace('{toDate}', self.apiClient.toPathValue(toDate))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'EventResponse'))
        return responseObjects
    def GetEvent(self, eventId, ):
        """GetEvent
        Args:
            eventId -- event Id

        Return:
            EventResponse -- an instance of EventResponse"""

        # Parse inputs
        resourcePath = '/events/{eventId}.{format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if eventId != None:
            resourcePath = resourcePath.replace('{eventId}', self.apiClient.toPathValue(eventId))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'EventResponse')
        return responseObject


    def GetEventsForSite(self, siteId, eventTypeFilter, pageNumber, pageSize, ):
        """GetEventsForSite
        Args:
            siteId -- site Id
            eventTypeFilter -- event Type Filter
            pageNumber -- page Number
            pageSize -- page Size

        Return:
            list<EventResponse> -- an instance of EventResponse"""

        # Parse inputs
        resourcePath = '/events/site/{siteId}.{format}?eventTypeFilter={eventTypeFilter}&pageNumber={pageNumber}&pageSize={pageSize}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if siteId != None:
            resourcePath = resourcePath.replace('{siteId}', self.apiClient.toPathValue(siteId))
        if eventTypeFilter != None:
            resourcePath = resourcePath.replace('{eventTypeFilter}', self.apiClient.toPathValue(eventTypeFilter))
        if pageNumber != None:
            resourcePath = resourcePath.replace('{pageNumber}', self.apiClient.toPathValue(pageNumber))
        if pageSize != None:
            resourcePath = resourcePath.replace('{pageSize}', self.apiClient.toPathValue(pageSize))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'EventResponse'))
        return responseObjects
    def GetEvents(self, eventTypeFilter, numberOfReturnedEvents, ):
        """GetEvents
        Args:
            eventTypeFilter -- event Type Filter
            numberOfReturnedEvents -- number Of Returned Events

        Return:
            list<EventResponse> -- an instance of EventResponse"""

        # Parse inputs
        resourcePath = '/events/{format}?eventTypeFilter={eventTypeFilter}&numberOfReturnedEvents={numberOfReturnedEvents}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if eventTypeFilter != None:
            resourcePath = resourcePath.replace('{eventTypeFilter}', self.apiClient.toPathValue(eventTypeFilter))
        if numberOfReturnedEvents != None:
            resourcePath = resourcePath.replace('{numberOfReturnedEvents}', self.apiClient.toPathValue(numberOfReturnedEvents))


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None


        # Create output objects if the response has more than one object
        responseObjects = []
        for responseObject in response:
          responseObjects.append(self.apiClient.deserialize(responseObject,
                                                         'EventResponse'))
        return responseObjects
